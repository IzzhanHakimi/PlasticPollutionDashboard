[{"name": "app.py", "content": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sklearn\nimport os\n\ncurrent_dir = os.path.dirname(__file__)\ncsv_path = os.path.join(current_dir, 'data', 'plastic-pollution-by-country-2024.csv')\ndf = pd.read_csv(csv_path)\n#df = pd.read_csv(\"plastic-pollution-by-country-2024.csv\")\nmain_arr = df.values\n\ncountry_column = df.country\ncountry_df = pd.DataFrame({\n    'Column1' : country_column,\n    'Column2' : country_column\n})\n\ncountry_array = country_df.values\n\ncountry_dict = {}\nfor row in country_array:\n    country_dict[row[0]] = row[1]\n\ndef getCountryStatus(country):\n    for row in main_arr:\n        if row[0] == country:\n            MWI_level = f\"{set_colour(row[2])}\"\n            plastic_consump = f\"Total Plastic Consumption (tons) : {row[3]}\"\n            plastic_mismanaged = f\"Total Plastic Mismanaged (tons) : {row[4]}\"\n            plastic_consump_capita = f\"Plastic Consumption per Capita (tons): {row[5]}\"\n            exported_plastic = f\"Exported Plastic Waste (tons) : {row[6]}\"\n            imported_plastic = f\"Imported Plastic Waste (tons) : {row[7]}\"\n            plastic_waterways = f\"Plastic Waste Released into Waterways (tons): {row[8]}\"\n            plastic_chemical = f\"Plastic Waste from Chemical Additives (tons): {row[9]}\"\n\n            status = [MWI_level, plastic_consump, plastic_mismanaged, plastic_consump_capita, exported_plastic, imported_plastic, plastic_waterways, plastic_chemical]\n\n            return status\n\ndef set_colour(MWI):\n    if MWI == \"Very High\":\n        return '<span style=\"color: red;\">Very High</span>'\n    elif MWI == \"High\":\n        return '<span style=\"color: orange;\">High</span>'\n    elif MWI == \"Medium\":\n        return '<span style=\"color: yellow;\">Medium</span>'\n    elif MWI == \"Low\":\n        return '<span style=\"color: green;\">Low</span>'\n    elif MWI == \"Very Low\":\n        return '<span style=\"color: darkgreen;\">Very Low</span>'\n    else:\n        return MWI\n\nimport joblib\n\nmodel_path = os.path.join(current_dir, 'data', 'model.joblib')\nmodel = joblib.load(model_path)\n\nscaler_path = os.path.join(current_dir, 'data', 'scaler.joblib')\nscaler = joblib.load(scaler_path)\n\nencoder_path = os.path.join(current_dir, 'data', 'encoder.joblib')\nencoder = joblib.load(encoder_path)\n\npca_path = os.path.join(current_dir, 'data', 'pca.joblib')\npca = joblib.load(pca_path)\n\n\n\n\n\n\n# Shiny Frontend\nfrom shiny import App, render, ui\nfrom shinyswatch import theme\n\napp_ui = ui.page_fluid(\n    theme.superhero(),\n    ui.tags.head(\n        ui.tags.style(\n            \"\"\"\n            .MWI-large-text {\n                font-size: 200px;\n            }\n            .prediction-header-text {\n                font-size: 50px;\n            }\n            \"\"\"\n        )\n    ),\n    ui.h1(\"Plastic Pollution Dashboard\", style=\"text-align: center; margin-top: 20px;\"),\n    ui.h2(\"Plastic Pollution by Country\", style=\"text-align: left; margin-top: 40px; margin-bottom: 30px\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_select(\"dropdown\", \"Choose a country:\", country_dict)\n        ),\n        ui.panel_main(\n            ui.div(\n                ui.output_ui(\"MWI_header_text\"),\n                ui.output_ui(\"MWI_Level\", style=\"font-size: 30px; font-weight: bold;\"),\n                style=\"justify-content: center;\"\n                ),\n            ui.output_text(\"plastic_consump_capita\"),\n            ui.output_text(\"exported_plastic\"),\n            ui.output_text(\"imported_plastic\"),\n            ui.output_text(\"plastic_waterways\"),\n            ui.output_text(\"plastic_chemical\")\n        )\n    ),\n    ui.h2(\"Global Infographic\", style=\"text-align: left; margin-top: 30px; margin-bottom: 30px\"),\n    ui.row(\n        ui.column(4, ui.output_plot(\"pie_plot\")),\n        ui.column(4, ui.output_plot(\"bar_plot_highest_plastic_consumption\")),\n        ui.column(4, ui.output_plot(\"bar_plot_highest_mismanaged_waste\"))\n    ),\n    ui.h2(\"MWI Level Predictor\", style=\"text-align: left; margin-top: 30px; margin-bottom: 30px\"),\n    ui.navset_card_pill(\n            ui.nav_panel(\n                \"Slider\",\n                ui.layout_sidebar(\n                    ui.panel_sidebar(\n                        ui.input_slider(\"plastic_consumption_slider\", \"Total Plastic Consumption (tons)\", 0, 10000000, 5000000),\n                        ui.input_slider(\"mismanaged_waste_slider\", \"Mismanaged Waste (tons)\", 0, 1000000, 500000),\n                        ui.input_slider(\"plastic_consumption_per_capita_slider\", \"Plastic Consumption per Capita (tons)\", 0, 50, 25),\n                        ui.input_slider(\"exported_slider\", \"Exported Waste (tons)\", 0, 100000, 50000),\n                        ui.input_slider(\"imported_slider\", \"Imported Waste (tons)\", 0, 1000000, 500000),\n                        ui.input_slider(\"waterways_released_slider\", \"Waste Released into Waterways (tons)\", 0, 100000, 50000),\n                        ui.input_slider(\"chemical_additives_slider\", \"Waste from Chemical Additives (tons)\", 0, 10000, 5000)\n                    ),\n                    ui.panel_main(\n                        ui.div(\n                            ui.output_ui(\"prediction_slider_header_text\", class_ = \"prediction-header-text\"),\n                            ui.output_ui(\"prediction_slider\", class_ = \"MWI-large-text\"),\n                            style = \"display: grid; grid-template-rows: auto; align-content: center; height: 100%; width: 100%;\"\n                        )\n                    )\n                )\n            ),\n            ui.nav_panel(\n                \"Manual\",\n                ui.layout_sidebar(\n                    ui.panel_sidebar(\n                        ui.input_numeric(\"plastic_consumption\", \"Total Plastic Consumption (tons)\", 0, min=0, max=10000000),\n                        ui.input_numeric(\"mismanaged_waste\", \"Mismanaged Waste (tons)\", 0, min=0, max=1000000),\n                        ui.input_numeric(\"plastic_consumption_per_capita\", \"Plastic Consumption per Capita (tons)\", 0, min=0, max=50),\n                        ui.input_numeric(\"exported\", \"Exported Waste (tons)\", 0, min=0, max=100000),\n                        ui.input_numeric(\"imported\", \"Imported Waste (tons)\", 0, min=0, max=1000000),\n                        ui.input_numeric(\"waterways_released\", \"Waste Released into Waterways (tons)\", 0, min=0, max=100000),\n                        ui.input_numeric(\"chemical_additives\", \"Waste from Chemical Additives (tons)\", 0, min=0, max=10000)\n                    ),\n                    ui.panel_main(\n                        ui.div(\n                            ui.output_ui(\"prediction_header_text\", class_ = \"prediction-header-text\"),\n                            ui.output_ui(\"prediction_manual\", class_ = \"MWI-large-text\"),\n                            style = \"display: grid; grid-template-rows: auto; align-content: center; height: 100%; width: 100%;\"\n                        )\n                    )\n                )\n            )\n        \n    )\n)\n\ndef server(input, output, session):    \n    @output\n    @render.ui\n    def MWI_Level():\n        status = getCountryStatus(input.dropdown())\n        mwi = status[0]\n        return ui.HTML(mwi)\n    \n    @output\n    @render.text\n    def plastic_consump():\n        status = getCountryStatus(input.dropdown())\n        return status[1]\n    \n    @output\n    @render.text\n    def plastic_mismanaged():\n        status = getCountryStatus(input.dropdown())\n        return status[2]\n    \n    @output\n    @render.text\n    def plastic_consump_capita():\n        status = getCountryStatus(input.dropdown())\n        return status[3]\n    \n    @output\n    @render.text\n    def exported_plastic():\n        status = getCountryStatus(input.dropdown())\n        return status[4]\n    \n    @output\n    @render.text\n    def imported_plastic():\n        status = getCountryStatus(input.dropdown())\n        return status[5]\n    \n    @output\n    @render.text\n    def plastic_waterways():\n        status = getCountryStatus(input.dropdown())\n        return status[6]\n    \n    @output\n    @render.text\n    def plastic_chemical():\n        result = getCountryStatus(input.dropdown())\n        return result[7]\n    \n    @output\n    @render.plot\n    def pie_plot():\n        sns.set_style(\"whitegrid\")\n        counts = df['PlasticPollutionMWILevel'].value_counts()\n        labels = counts.index\n        sizes = counts.values\n        percentages = [f'{(s / sizes.sum()) * 100:.1f}%' for s in sizes]\n        labels_with_percentages = [f'{l} ({p})' for l, p in zip(labels, percentages)]\n\n        plt.figure(figsize=(8, 6))\n        plt.pie(sizes, labels=labels_with_percentages, autopct='%1.1f%%', startangle=140)\n        plt.title(\"Distribution of MWI Levels\")\n        plt.axis('equal')\n\n    @output\n    @render.plot\n    def bar_plot_highest_plastic_consumption():\n        consumption_top10 = df.sort_values(by='PlasticPollutionTotalPlasticConsumption_intonsofplasticwaste', ascending=False).head(10)\n\n        sns.barplot(consumption_top10, x = 'PlasticPollutionTotalPlasticConsumption_intonsofplasticwaste', y = 'country', orient = 'h')\n        plt.title('Top 10 Countries with Highest Plastic Consumption')\n\n    @output\n    @render.plot\n    def bar_plot_highest_mismanaged_waste():\n        mismanaged_top10 = df.sort_values(by='PlasticPollutionMismanagedWaste2023_expected_tons', ascending = False).head(10)\n\n        sns.barplot(mismanaged_top10, x = 'PlasticPollutionMismanagedWaste2023_expected_tons', y = 'country', orient='h')\n        plt.title('Top 10 Countries with Highest Mismanaged Waste')\n\n    @output\n    @render.ui\n    def prediction_slider():\n        inputs = [[\n            input.plastic_consumption_slider(),\n            input.mismanaged_waste_slider(),\n            input.plastic_consumption_per_capita_slider(), \n            input.exported_slider(), \n            input.imported_slider(), \n            input.waterways_released_slider(), \n            input.chemical_additives_slider()\n            ]]\n        \n        inputs = pca.transform(inputs)\n        inputs = scaler.transform(inputs)\n\n        result = model.predict(inputs)\n        result = encoder.inverse_transform(result)\n\n        mwi = set_colour(result[0])\n        return ui.HTML(mwi)\n\n    @output\n    @render.ui\n    def prediction_manual():\n        inputs = [[\n            input.plastic_consumption(), \n            input.mismanaged_waste(), \n            input.plastic_consumption_per_capita(), \n            input.exported(), \n            input.imported(), \n            input.waterways_released(), \n            input.chemical_additives()\n            ]]\n        \n        try:\n            inputs = pca.transform(inputs)\n        except Exception:\n            return ui.output_ui(\"error_handler\")\n            \n        inputs = scaler.transform(inputs)\n\n        result = model.predict(inputs)\n        result = encoder.inverse_transform(result)\n\n        mwi = set_colour(result[0])\n        return ui.HTML(mwi)\n    \n    @output\n    @render.ui\n    def prediction_header_text():\n        return \"Predicted MWI Level: \"\n    \n    @output\n    @render.ui\n    def prediction_slider_header_text():\n        return \"Predicted MWI Level: \"\n    \n    @output\n    @render.ui\n    def MWI_header_text():\n        return ui.HTML('<span display: inline;\">MWI Level: </span>')\n    \n    @output\n    @render.ui\n    def error_handler():\n        return \"   \"\n        \napp = App(app_ui, server)\n\nif __name__ == \"__main__\":\n    app.run()", "type": "text"}, {"name": "data\\encoder.joblib", "content": "gASVEgEAAAAAAACMHHNrbGVhcm4ucHJlcHJvY2Vzc2luZy5fbGFiZWyUjAxMYWJlbEVuY29kZXKUk5QpgZR9lCiMCGNsYXNzZXNflIwTam9ibGliLm51bXB5X3BpY2tsZZSMEU51bXB5QXJyYXlXcmFwcGVylJOUKYGUfZQojAhzdWJjbGFzc5SMBW51bXB5lIwHbmRhcnJheZSTlIwFc2hhcGWUSwWFlIwFb3JkZXKUjAFDlIwFZHR5cGWUaAyMBWR0eXBllJOUjAJPOJSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0s/dJRijAphbGxvd19tbWFwlImMG251bXB5X2FycmF5X2FsaWdubWVudF9ieXRlc5RLEHVigAJjbnVtcHkuY29yZS5tdWx0aWFycmF5Cl9yZWNvbnN0cnVjdApxAGNudW1weQpuZGFycmF5CnEBSwCFcQJjX2NvZGVjcwplbmNvZGUKcQNYAQAAAGJxBFgGAAAAbGF0aW4xcQWGcQZScQeHcQhScQkoSwFLBYVxCmNudW1weQpkdHlwZQpxC1gCAAAATzhxDImIh3ENUnEOKEsDWAEAAAB8cQ9OTk5K/////0r/////Sz90cRBiiV1xEShYBAAAAEhpZ2hxElgDAAAATG93cRNYBgAAAE1lZGl1bXEUWAkAAABWZXJ5IEhpZ2hxFVgIAAAAVmVyeSBMb3dxFmV0cRdiLpUeAAAAAAAAAIwQX3NrbGVhcm5fdmVyc2lvbpSMBTEuMi4ylHViLg==", "type": "binary"}, {"name": "data\\model.joblib", "content": "", "type": "binary"}, {"name": "data\\pca.joblib", "content": "gASVygEAAAAAAACMGnNrbGVhcm4uZGVjb21wb3NpdGlvbi5fcGNhlIwDUENBlJOUKYGUfZQojAxuX2NvbXBvbmVudHOUSwKMBGNvcHmUiIwGd2hpdGVulImMCnN2ZF9zb2x2ZXKUjARhdXRvlIwDdG9slEcAAAAAAAAAAIwOaXRlcmF0ZWRfcG93ZXKUaAmMDW5fb3ZlcnNhbXBsZXOUSwqMGnBvd2VyX2l0ZXJhdGlvbl9ub3JtYWxpemVylGgJjAxyYW5kb21fc3RhdGWUTowObl9mZWF0dXJlc19pbl+USweMD19maXRfc3ZkX3NvbHZlcpSMBGZ1bGyUjAVtZWFuX5SME2pvYmxpYi5udW1weV9waWNrbGWUjBFOdW1weUFycmF5V3JhcHBlcpSTlCmBlH2UKIwIc3ViY2xhc3OUjAVudW1weZSMB25kYXJyYXmUk5SMBXNoYXBllEsHhZSMBW9yZGVylIwBQ5SMBWR0eXBllGgZjAVkdHlwZZSTlIwCZjiUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYowKYWxsb3dfbW1hcJSIjBtudW1weV9hcnJheV9hbGlnbm1lbnRfYnl0ZXOUSxB1Ygr/////////////bbEyfJZWKEHp1DzIm34UQQQBbh9S7kJArAzfiAII4EA9yF0/W7zgQKp5kLs+mc9AOjUPctcAoECViAAAAAAAAACMD25vaXNlX3ZhcmlhbmNlX5SMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMBnNjYWxhcpSTlGglQwijYaZfKafoQZSGlFKUjApuX3NhbXBsZXNflEvKjAtjb21wb25lbnRzX5RoFSmBlH2UKGgYaBtoHEsCSweGlGgeaB9oIGglaCiIaClLEHViBv///////6MFdaSeXe8/GEJZEn/4yD+AzcMnKq8UPopfJYn98I8/UmJ7AOI1nD9MvwsKuzGMP9XrfS83f1M/18eXCt/lyL/v9hOsc1/vP8cM0m7bK+C+vBZQLtstl79A0goYIUKQv1x37wn2KIs/axpqKAB/eD+VSwAAAAAAAACMDW5fY29tcG9uZW50c1+USwKME2V4cGxhaW5lZF92YXJpYW5jZV+UaBUpgZR9lChoGGgbaBxLAoWUaB5oH2ggaCVoKIhoKUsQdWIL//////////////+ioXdXKjqjQqJoY+wholdClT8AAAAAAAAAjBlleHBsYWluZWRfdmFyaWFuY2VfcmF0aW9flGgVKYGUfZQoaBhoG2gcSwKFlGgeaB9oIGglaCiIaClLEHViB/////////+LSM34GcXuP5ae06kc6aI/lTYAAAAAAAAAjBBzaW5ndWxhcl92YWx1ZXNflGgVKYGUfZQoaBhoG2gcSwKFlGgeaB9oIGglaCiIaClLEHViEP////////////////////+cecJwqvqFQa3w89oIO2FBlR4AAAAAAAAAjBBfc2tsZWFybl92ZXJzaW9ulIwFMS4yLjKUdWIu", "type": "binary"}, {"name": "data\\plastic-pollution-by-country-2024.csv", "content": "country,PlasticPollutionMWI,PlasticPollutionMWILevel,PlasticPollutionTotalPlasticConsumption_intonsofplasticwaste,PlasticPollutionMismanagedWaste2023_expected_tons,PlasticPollutionPerCapitaPlasticConsumption_kg_capita_year,PlasticPollutionWasteExported_tons,PlasticPollutionWasteImported_tons,PlasticPollutionMicroplasticReleasedIntoWaterways_tons,PlasticPollutionPollutionFromChemicalAdditives_tons\nIndia,98.55,Very High,7408124,7300752,5.3,59260,98860,330764,44535\nChina,17.41,Low,37606230,6546264,26.7,496480,1273710,517699,39932\nUnited States,8.71,Very Low,22867246,1992144,69,380350,264760,254667,12152\nIndonesia,98.42,Very High,3366941,3313742,12.4,26940,79080,80414,20214\nPakistan,91.53,Very High,790123,723213,3.5,6320,4790,58487,4412\nNigeria,99.44,Very High,935848,930624,4.5,7490,960,27685,5677\nBrazil,97.97,Very High,4911580,4811936,23,39290,1250,53708,29353\nBangladesh,98.54,Very High,579920,571453,3.5,0,2860,47830,3486\nRussia,97.82,Very High,3164038,3094976,22,25310,12180,47987,18879\nEthiopia,96.41,Very High,150254,144867,1.3,5260,0,13381,884\nMexico,67.24,High,4049874,2723104,32.1,200880,26090,36238,16611\nJapan,10.87,Very Low,3806805,413770,30.2,675660,2540,172872,2524\nPhilippines,98.37,Very High,938218,922969,8.4,78540,7950,31807,5630\nEgypt,89.37,Very High,834699,745985,7.8,70,950,31451,4551\nDR Congo,97.75,Very High,1144387,1118640,12.3,30,0,10456,6824\nVietnam,32.01,Low,2951900,944959,30.5,131330,713980,27130,5764\nIran,84.41,Very High,1305605,1102093,15,0,0,19684,6723\nTurkey,48.03,Medium,938490,450803,11.2,9580,429770,19827,2750\nGermany,8.34,Very Low,3568313,297559,42.9,428860,294020,74309,1815\nThailand,98.49,Very High,3355763,3304945,46.9,132630,179080,26463,20160\nTanzania,99.61,Very High,126931,126432,2.1,3030,200,7298,771\nUnited Kingdom,12.31,Very Low,2085254,256610,31.1,149230,45720,59546,1565\nFrance,5.08,Very Low,2680095,136239,39.7,314320,101040,60757,831\nSouth Africa,81.81,Very High,1013303,828949,17.2,8110,5600,12765,5057\nItaly,22.03,Low,3335851,734733,56.1,156940,141810,55704,4482\nKenya,98.9,Very High,270850,267861,5.2,2170,50,7512,1634\nMyanmar,99.18,Very High,498431,494335,9.3,6120,30490,14348,3015\nColombia,62.42,High,769331,480247,15.1,6150,100,2,2930\nUganda,99.71,Very High,59786,59613,1.3,510,30,4758,364\nSudan,80.53,Very High,359574,289580,8.1,0,0,6722,1766\nSpain,16.92,Low,1580823,267425,33.4,57160,141750,42735,1631\nIraq,98.35,Very High,695106,683664,16.3,0,480,8950,4170\nAlgeria,12.82,Very Low,2092007,268285,48.1,0,0,13747,1637\nArgentina,40.77,Medium,1236184,503987,27.2,9890,0,23641,3074\nAfghanistan,98.06,Very High,447766,439097,11.5,0,850,9101,2678\nPoland,13.49,Very Low,1315,177365,34.7,130100,214850,35388,1082\nCanada,2.57,Very Low,2106603,54061,55.4,386440,426440,29422,330\nMorocco,74.41,High,548160,407884,14.9,4390,2530,5980,2488\nUkraine,59.39,Medium,1066942,633696,24.2,8540,37140,32866,3866\nAngola,94.37,Very High,568842,536821,17,4550,210,8184,3275\nSaudi Arabia,70.23,High,2105362,1478568,58.5,43530,30,26737,9019\nUzbekistan,98.23,Very High,100000,98225,2.9,800,14400,8212,599\nYemen,97.8,Very High,384783,376318,11.9,0,0,3581,2296\nMozambique,99.85,Very High,105235,105074,3.4,860,640,3671,641\nGhana,87.98,Very High,141531,124522,4.4,1130,910,4026,760\nPeru,94.49,Very High,597668,564722,17.9,4780,5230,8251,3445\nMalaysia,76.4,High,1371397,1047735,41.3,25650,589970,11789,6391\nNepal,93.84,Very High,267823,251325,9.1,2140,0,8995,1533\nMadagascar,99.81,Very High,299816,299232,10.6,2400,0,3349,1825\nIvory Coast,97.95,Very High,473230,463511,17.7,3790,3210,7102,2827\nVenezuela,53.21,Medium,1200487,638790,42.1,0,0,8029,3897\nCameroon,87.46,Very High,107930,94400,4.1,0,30,7425,576\nNiger,98.24,Very High,37313,36656,1.5,0,0,1304,224\nAustralia,9.29,Very Low,1160779,107851,45.2,165690,17020,33117,658\nSyria,94.59,Very High,315000,297944,15.2,0,0,2679,1817\nMali,97.11,Very High,38747,37626,1.8,2740,60,2133,230\nTaiwan,4.49,Very Low,1484073,66635,62,0,0,32765,406\nBurkina Faso,94.05,Very High,231773,217974,10.8,1850,170,4140,1330\nSri Lanka,92.09,Very High,184216,169645,8.4,1470,0,10369,1035\nMalawi,97.23,Very High,103247,100392,5.3,830,140,2255,612\nZambia,94.01,Very High,277947,261284,14.7,2840,50,2630,1594\nKazakhstan,94.14,Very High,1164935,1096651,62.1,9320,10,58878,6690\nChile,35.19,Low,609432,214482,31.6,7600,1060,9716,1308\nRomania,72.44,High,510297,369642,26.5,25550,54920,20757,2255\nChad,97.37,Very High,81531,79388,4.9,0,0,2976,484\nSomalia,97.32,Very High,185048,180080,11.2,0,0,8280,1098\nEcuador,98.5,Very High,251270,247512,14.3,6400,7600,4630,1510\nGuatemala,79.72,High,476663,379975,28.3,7380,880,4600,2318\nSenegal,97.36,Very High,220865,215045,13.4,3700,0,1976,1312\nNetherlands,4.71,Very Low,989442,46561,56.7,263060,337750,16391,284\nCambodia,91.89,Very High,93654,86055,5.7,8070,0,4829,525\nZimbabwe,88.78,Very High,333443,296016,21.3,2670,330,7912,1806\nGuinea,97.61,Very High,23876,23307,1.8,0,120,1110,142\nRwanda,96.55,Very High,348837,336806,26.5,2790,0,1614,2055\nBenin,89.21,Very Low,50073,44669,4,400,80,805,272\nBurundi,97.24,Very High,65521,63712,5.4,520,0,960,389\nBolivia,73.04,High,226189,165214,18.9,1810,0,2225,1008\nTunisia,79.47,High,179885,142947,14.8,14390,0,97492,872\nHaiti,99.61,Very High,126931,126432,2.1,3030,200,7298,771\nBelgium,5.72,Very Low,656295,37561,56.9,297950,148570,11168,229\nDominican Republic,89.16,Very High,406391,362330,49.3,0,0,13338,2210\nJordan,61.64,High,404800,249536,37,3240,0,2442,1522\nSouth Sudan,97.34,Very High,213256,207574,20.1,0,730,1461,1266\nCuba,73.81,High,258498,190805,22.9,0,0,3381,1164\nHonduras,71.88,High,311548,223939,30.8,2490,19880,1903,1366\nSweden,1.49,Very Low,288007,4304,27.8,86120,15640,9838,26\nPapua New Guinea,80.58,Very High,100000,80583,10.3,0,0,12813,492\nCzech Republic,1.89,Very Low,475180,8996,44.4,643420,675870,10538,55\nAzerbaijan,98.01,Very High,230619,226034,22.8,1840,3910,3530,1379\nTajikistan,99.25,Very High,142193,141129,14.9,0,930,1743,861\nGreece,58.76,Medium,350828,206141,32.8,22670,3200,11928,1257\nPortugal,12.09,Very Low,344912,41687,33.5,32470,4340,10450,254\nHungary,1.32,Very Low,482560,6381,49.5,21980,15510,11990,39\nUnited Arab Emirates,90.94,Very High,1079752,981877,116.3,13250,9300,9300,5989\nBelarus,30.33,Low,513600,155786,54.8,20260,10890,6295,950\nIsrael,4.12,Very Low,972000,40010,105.5,15320,480,8582,244\nTogo,98.69,Very High,110903,109451,13.1,890,0,994,668\nSierra Leone,97.17,Very High,48545,47169,5.9,0,0,773,288\nAustria,4.12,Very Low,408397,16836,45.8,129820,98810,8796,103\nSwitzerland,8.91,Very Low,312482,27853,36.2,30160,5070,8550,170\nLaos,79.74,High,21466,17116,2.9,2200,1710,2197,104\nHong Kong,0.91,Very Low,1249560,11410,167,0,0,11017,70\nNicaragua,87.12,Very High,162916,141932,24.1,11240,1010,1244,866\nSerbia,54.42,Medium,234232,127460,34,9940,18700,8447,778\nLibya,55.21,Medium,161070,88928,24.2,0,0,3396,542\nParaguay,67.64,High,223240,151008,33.7,1790,1540,2163,921\nKyrgyzstan,98.47,Very High,118637,116817,18,1690,0,1974,713\nBulgaria,54.77,Medium,194447,106504,28,5910,24320,2763,650\nTurkmenistan,41.28,Medium,10950,4520,1.8,0,0,2169,28\nEl Salvador,38.68,Low,164900,63784,26.2,10310,2200,1338,389\nRepublic of the Congo,87.79,Very High,48082,42210,8.4,0,0,655,257\nSingapore,4.97,Very Low,593875,29525,104.4,24450,3150,8600,180\nDenmark,1.56,Very Low,228345,3552,39.2,184560,14960,13786,22\nCentral African Republic,97.3,Very High,87984,85606,16.5,0,0,603,592\nSlovakia,9.9,Very Low,196240,19426,35.9,44430,31010,5944,118\nFinland,1.4,Very Low,205063,2863,37.1,70360,15420,5963,17\nLiberia,97.09,Very High,44905,43599,8.8,0,0,578,266\nNorway,1.75,Very Low,289000,5068,53.7,62780,6990,5727,31\nNew Zealand,10.45,Very Low,154091,16103,30.3,20960,340,7390,98\nCosta Rica,21.53,Low,160600,34582,31.3,22730,970,1696,211\nLebanon,48.26,Medium,234600,113228,41.4,8350,370,1798,691\nIreland,8.31,Very Low,333875,27734,67,41380,65800,5760,169\nMauritania,94.75,Very High,90800,86032,20.2,0,0,764,525\nOman,97.82,Very High,364326,356375,80.2,0,0,4249,2174\nPanama,91.56,Very High,85364,78158,19.9,0,0,3133,477\nKuwait,93.66,Very High,350000,327798,80.3,9380,0,3467,2000\nCroatia,22.3,Low,100078,22314,24.7,8680,3580,4875,136\nEritrea,97.34,Very High,57832,56291,16.3,0,0,31383,343\nGeorgia,80.27,Very High,24000,19265,6.4,1210,10,1110,118\nMongolia,98.47,Very High,420500,414064,127.6,3360,0,8434,2526\nUruguay,96.08,Very High,123346,118506,36,990,310,3095,723\nMoldova,89.82,Very High,398120,357604,151.1,3180,0,1055,2181\nPuerto Rico,22.89,Low,433779,99289,132.2,0,0,2839,606\nBosnia and Herzegovina,72.42,High,153293,111019,46.2,6560,0,14249,677\nGambia,97.27,Very High,18764,18252,7.3,0,0,186,111\nAlbania,69.9,High,109725,76692,38.7,0,0,1431,468\nJamaica,98.18,Very High,50262,49348,17.8,4160,0,1204,301\nArmenia,97.76,Very High,56179,54918,20,450,130,1433,335\nQatar,77.34,High,166011,128401,60.1,0,0,3399,783\nBotswana,94.86,Very High,25885,24553,10.2,260,110,1175,150\nLithuania,6.26,Very Low,131950,8254,47.2,32900,37910,3667,50\nNamibia,95.57,Very High,31516,30120,12.7,250,170,21653,184\nGabon,88.1,Very High,29230,25752,12.7,0,0,8358,157\nLesotho,95.18,Very High,7828,7450,3.5,0,0,1473,45\nGuinea-Bissau,97.28,Very High,23032,22406,11.4,0,0,241,137\nSlovenia,6.34,Very Low,83171,5270,39.6,72050,61620,4006,32\nNorth Macedonia,41.52,Medium,97789,40603,47.2,7820,590,14812,248\nLatvia,24.04,Low,65989,15865,34.7,14720,36480,14012,97\nEquatorial Guinea,64.53,High,24361,15719,15.3,0,0,745,96\nTrinidad and Tobago,87.9,Very High,139533,122655,91.9,0,0,1752,748\nBahrain,4.63,Very Low,70444,3261,47.7,710,0,2198,20\nTimor-Leste,88.3,Very High,10539,9306,8.1,0,0,563,17\nEstonia,28.33,Low,34413,9749,25.9,6350,1370,4969,59\nMauritius,15.47,Low,54312,8402,42.9,1800,0,759,51\nCyprus,19.11,Low,43771,8364,35.4,4580,1020,2103,51\nEswatini,84.21,Very High,23252,19580,19.7,930,60,435,119\nDjibouti,88.2,Very High,2255,10809,11.2,0,0,805,66\nFiji,60.56,High,14204,8602,15.4,1170,0,21710,52\nComoros,97.06,Very High,4551,4417,5.6,0,0,136,27\nGuyana,25.57,Low,25454,6508,31.9,0,0,655,40\nBhutan,80.32,Very High,14471,11623,18.7,0,170,373,71\nSolomon Islands,100,Very High,40224,40224,58.2,0,0,337,245\nMacau,67.09,High,221852,148850,328,0,0,1884,908\nLuxembourg,0.12,Very Low,64080,74,101.6,10470,1140,1560,0\nSuriname,100,Very High,8648,8648,14.2,0,0,590,53\nMontenegro,89.95,Very High,61154,55011,98.4,490,300,655,336\nCape Verde,82.54,Very High,14126,11659,24.2,0,0,252,71\nMalta,7.07,Very Low,32280,2284,62.6,2170,0,1712,14\nMaldives,81.09,Very High,6345,5145,12.3,240,0,672,31\nBrunei,32.42,Low,34601,11216,78.3,400,0,1624,68\nBelize,66.81,High,19262,12868,48.8,530,0,547,78\nBahamas,17.02,Low,39600,6738,97.4,0,0,1253,41\nIceland,0.97,Very Low,47250,459,128.9,7650,0,1347,3\nVanuatu,95.82,Very High,4530,4340,14.5,0,0,245,26\nFrench Polynesia,74.35,High,2940,2186,9.7,400,0,10599,13\nNew Caledonia,44.74,Medium,17846,7984,65.8,0,0,1426,49\nBarbados,10.64,Very Low,29893,3180,106.5,1000,0,1198,19\nSao Tome and Principe,88.35,Very High,2727,2409,12.5,0,0,196,15\nSamoa,41.53,Medium,3562,1479,16.6,0,0,524,9\nSaint Lucia,26.09,Low,17076,4454,95.3,0,0,501,27\nGuam,18.11,Low,17546,3177,103.7,0,0,1695,19\nKiribati,87.26,Very High,5894,5143,46.6,0,0,282,31\nMicronesia,98.74,Very High,3463,3420,30.9,0,0,195,21\nTonga,79.33,High,2310,1833,21.9,0,0,493,11\nSeychelles,19.64,Low,4752,933,48.3,0,0,1121,6\nSaint Vincent and the Grenadines,30.18,Low,2651,800,25.3,0,0,8901,5\nAntigua and Barbuda,2.55,Very Low,3976,101,42.9,0,0,1121,1\nAndorra,44.77,Medium,4859,2176,62.5,0,0,1123,13\nDominica,22.59,Low,2108,476,29.3,13140,0,473,3\nCayman Islands,67.95,High,6600,4484,98.1,0,0,2683,27\nBermuda,0.13,Very Low,10660,14,166.8,0,0,1101,0\nGreenland,4.49,Very Low,1200,54,21.3,0,0,1095,0\nFaroe Islands,36.01,Low,8137,2930,155.2,0,0,1093,18\nSaint Kitts and Nevis,5.03,Very Low,7631,384,160.2,0,0,1077,2\nSint Maarten,21.23,Low,2065,438,63.4,0,0,1092,3\nAmerican Samoa,53.03,Medium,2431,1289,52.6,0,0,482,8\nMarshall Islands,83,Very High,1120,930,25.8,0,0,4176,6\nLiechtenstein,35.4,Low,1749,619,45.1,0,0,1082,4\nSan Marino,56.97,Medium,962,548,28.3,0,0,1079,3\nGibraltar,21.23,Low,2689,571,82.2,0,0,1079,3\nBritish Virgin Islands,21.95,Low,1329,292,43,0,0,1060,2\nPalau,39.08,Low,3017,1179,167.8,0,0,3210,7\n", "type": "text"}, {"name": "data\\scaler.joblib", "content": "gASVrAEAAAAAAACMG3NrbGVhcm4ucHJlcHJvY2Vzc2luZy5fZGF0YZSMDlN0YW5kYXJkU2NhbGVylJOUKYGUfZQojAl3aXRoX21lYW6UiIwId2l0aF9zdGSUiIwEY29weZSIjA5uX2ZlYXR1cmVzX2luX5RLAowPbl9zYW1wbGVzX3NlZW5flIwVbnVtcHkuY29yZS5tdWx0aWFycmF5lIwGc2NhbGFylJOUjAVudW1weZSMBWR0eXBllJOUjAJpOJSJiIeUUpQoSwOMATyUTk5OSv////9K/////0sAdJRiQwiXAAAAAAAAAJSGlFKUjAVtZWFuX5SME2pvYmxpYi5udW1weV9waWNrbGWUjBFOdW1weUFycmF5V3JhcHBlcpSTlCmBlH2UKIwIc3ViY2xhc3OUaA2MB25kYXJyYXmUk5SMBXNoYXBllEsChZSMBW9yZGVylIwBQ5SMBWR0eXBllGgPjAJmOJSJiIeUUpQoSwNoE05OTkr/////Sv////9LAHSUYowKYWxsb3dfbW1hcJSIjBtudW1weV9hcnJheV9hbGlnbm1lbnRfYnl0ZXOUSxB1Ygj///////////HkUb26ovtAtXnDuiUVt8CVKgAAAAAAAACMBHZhcl+UaBspgZR9lChoHmggaCFLAoWUaCNoJGglaChoKohoK0sQdWIM////////////////PSsG4zsaqUIFfYbc6jdcQpUsAAAAAAAAAIwGc2NhbGVflGgbKYGUfZQoaB5oIGghSwKFlGgjaCRoJWgoaCqIaCtLEHViCv////////////9y084xmVdMQXqkXKmXPyVBlR4AAAAAAAAAjBBfc2tsZWFybl92ZXJzaW9ulIwFMS4yLjKUdWIu", "type": "binary"}]